#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"languageName":"csharp","name":"csharp"}]}}

#!markdown

# Power Platform Notebook - Admininstration - Reset, Restore and Clean an Environment

**Goal:** Reset, Restore and Clean a Power Platform / Dataverse environment to continue the work from a reference environment.

#!markdown

## Prerequisites check

### Power Platform CLI

#!pwsh

# Power Platform CLI -https://learn.microsoft.com/en-us/power-platform/developer/cli/introduction
Write-Host "Checking if Power Platform CLI is installed..." -ForegroundColor Green

try {
    $powerPlatformCliVersion = pac help
} catch {
    Write-Host "Power Platform CLI does not seem installed. Installing..." -ForegroundColor Blue
    dotnet tool install --global Microsoft.PowerApps.CLI.Tool
}

Write-Host "üëçüèº Power Platform CLI is installed!" -ForegroundColor Green

#!markdown

### NuGet packages and namespaces

> Specified version of "Microsoft.PowerPlatform.Dataverse.Client" due to a 'Could not load file or assembly System.ServiceModel.Primitives' error when trying to connect using more recent versions.

#!csharp

// Define NuGet source
#i "nuget:https://api.nuget.org/v3/index.json"

// Import latest version of NuGet packages
#r "nuget:Microsoft.PowerPlatform.Dataverse.Client, 1.0.39"
#r "nuget:Microsoft.Xrm.Sdk"
#r "nuget:Newtonsoft.Json"
//#r "nuget:System.ServiceModel.Primitives"

// Namespaces to work with Power Platform / Dataverse
using Microsoft.PowerPlatform.Dataverse.Client;
using Microsoft.Crm.Sdk.Messages;
using Microsoft.Xrm.Sdk;
using Microsoft.Xrm.Sdk.Query;

// Other namespaces
using System.Globalization;
using Newtonsoft.Json;
//using System.ServiceModel;

#!markdown

## Set variables and connections

### URL of the environment to reset, restore and clean

#!csharp

// Input prompt to get the URL of the environment to reset, restore and clean
string targetedEnvironmentUrl = await GetInputAsync("Please enter the full URL of the environment to reset, restore and clean.");

#!pwsh

# Propagate the URL of the environment to reset, restore and clean to PowerShell
#!set --name targetedEnvironmentUrl --value @csharp:targetedEnvironmentUrl

#!markdown

### URL of the source environment for the backup restore

#!csharp

// Input prompt to get the URL of the source environment for the backup restore
string sourceEnvironmentUrl = await GetInputAsync("Please enter the full URL of the source environment for the backup restore.");

#!pwsh

# Propagate the URL of the source environment for the backup restore to PowerShell
#!set --name sourceEnvironmentUrl --value @csharp:sourceEnvironmentUrl

#!markdown

### Connection to Power Platform CLI

#!pwsh

# Power Platform CLI authentication
Write-Host "Creating a profile of kind ADMIN..." -ForegroundColor Blue

pac auth create --deviceCode --kind ADMIN

Write-Host "üëçüèº Connected to Power Platform CLI!" -ForegroundColor Green

#!markdown

### Connection to Microsoft.PowerPlatform.Dataverse.Client

> ‚ö†Ô∏è Unfortunately, this part currently does not work from GitHub Codespaces.

#!csharp

// Initialize a connection (service client) for the considered environment
string connectionString = $"Url={targetedEnvironmentUrl};RedirectUri=http://localhost;LoginPrompt=Auto;AuthType=OAuth";

ServiceClient serviceClient = new ServiceClient(connectionString);

#!markdown

## Refresh of the considered environment

### Reset environment

#!pwsh

# Reset the considered environment
Write-Host "Start of the reset of the '$targetedEnvironmentUrl' environment..." -ForegroundColor Green

pac admin reset --environment $targetedEnvironmentUrl --async

Write-Host "üëçüèº Reset operation completed!" -ForegroundColor Green

#!pwsh

# Montior the status of the reset operation previously launched
pac admin status

#!markdown

### Restore environment

> In this operation, we will restore the latest system backup of the source environment into the targeted one.

#!pwsh

# Restore the targeted environment with the latest backup from the source environment
Write-Host "Start of the restore of the '$targetedEnvironmentUrl' environment from a backup of the '$sourceEnvironmentUrl' environment..." -ForegroundColor Green

pac admin restore --selected-backup latest --source-env $sourceEnvironmentUrl --target-env $targetedEnvironmentUrl --async

Write-Host "üëçüèº Restore operation completed!" -ForegroundColor Green

#!pwsh

# Montior the status of the reset operation previously launched
pac admin status

#!markdown

### Deploy bulk delete jobs

> ‚ö†Ô∏è Unfortunately, this part currently does not work from GitHub Codespaces.

#!csharp

// Get bulk delete jobs details from configuration file
#!value --from-file ./BulkDeleteJobs.json --name bulkDeleteJobsDetailsJson

#!csharp

// Get content of configuration value extracted in raw value storage in a previous step
#!set --value @value:bulkDeleteJobsDetailsJson --name bulkDeleteJobsDetailsJson

public class BulkDeleteJobDetails {
    public string JobName { get; set; }
    public string FetchXmlQuery { get; set; }
    public int StartHour { get; set; }
};

BulkDeleteJobDetails[] bulkDeleteJobsDetails = JsonConvert.DeserializeObject<BulkDeleteJobDetails[]>(bulkDeleteJobsDetailsJson);
DateTime currentDateTime = DateTime.Now;

// Go through each bulk delete job in the configuration file for creation in the environment
foreach (BulkDeleteJobDetails bulkDeleteJobDetails in bulkDeleteJobsDetails) {
    Console.WriteLine($"‚û°Ô∏è Start creation of following bulk delete job: {bulkDeleteJobDetails.JobName}");
    // Initialize bulk delete request
    FetchXmlToQueryExpressionRequest fetchXmlRequest = new FetchXmlToQueryExpressionRequest {
        FetchXml = bulkDeleteJobDetails.FetchXmlQuery
    };

    FetchXmlToQueryExpressionResponse fetchXmlResponse = (FetchXmlToQueryExpressionResponse) serviceClient.Execute(fetchXmlRequest);

    DateTime startDateTime = new DateTime(currentDateTime.Year, currentDateTime.Month, currentDateTime.Day, bulkDeleteJobDetails.StartHour, 0, 0);

    BulkDeleteRequest bulkDeleteRequest = new BulkDeleteRequest {
        JobName = bulkDeleteJobDetails.JobName,
        QuerySet = new QueryExpression[] {fetchXmlResponse.Query},
        StartDateTime = startDateTime,
        ToRecipients = new Guid[] { },
        CCRecipients = new Guid[] { },
        SendEmailNotification = false,
        RecurrencePattern = "FREQ=DAILY;INTERVAL=1;"
    };

    // Check if bulk delete job exists and if yes delete them - update not really possible
    QueryExpression searchForBulkDeleteOperationByName = new QueryExpression("bulkdeleteoperation");
    searchForBulkDeleteOperationByName.ColumnSet = new ColumnSet(true);
    searchForBulkDeleteOperationByName.Criteria.AddCondition("name", ConditionOperator.Equal, bulkDeleteRequest.JobName);
    searchForBulkDeleteOperationByName.Criteria.AddCondition("isrecurring", ConditionOperator.Equal, true);

    EntityCollection bulkDeleteOperations = serviceClient.RetrieveMultiple(searchForBulkDeleteOperationByName);

    // Initialise object to be able to delete the async operation related to the considered bulk delete job
    var asyncOperation = new Entity("asyncoperation");
    asyncOperation["statecode"] = 3;
    //asyncOperation["statuscode"] = 32;

    if (bulkDeleteOperations != null && bulkDeleteOperations.Entities != null && bulkDeleteOperations.Entities.Count > 0) {
        foreach (var bulkDeleteOperation in bulkDeleteOperations.Entities) {
            EntityReference bulkDeleteJobAsyncOperation = (EntityReference) bulkDeleteOperation.Attributes["asyncoperationid"];
            Console.WriteLine($"üßπ Delete bulk delete job(s) (+ related async operation) found with the following name: {bulkDeleteRequest.JobName} ({bulkDeleteOperation.Id})");
            asyncOperation.Id = bulkDeleteJobAsyncOperation.Id;
           
            try {
                serviceClient.Update(asyncOperation);
            } catch {
                // do nothing
            }
           
            serviceClient.Delete(bulkDeleteOperation.LogicalName, bulkDeleteOperation.Id);
        }
    }

    // Create bulk delete job
    BulkDeleteResponse bulkDeleteResponse = (BulkDeleteResponse) serviceClient.Execute(bulkDeleteRequest);
    Console.WriteLine($"‚úÖ Bulk delete operation created: {bulkDeleteResponse.JobId}");
}
